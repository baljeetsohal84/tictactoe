
(defparameter players (make-array 2 :initial-element 'X))
(setf (aref players 1) 'O)

(defun play_move(state player block_num)
    (if (equalp (aref state (floor (/ (- block_num 1) 4)) (mod (- block_num 1) 4)) '_)
        (setf (aref state (floor (/ (- block_num 1) 4)) (mod (- block_num 1) 4)) player)
        
        (progn
         (terpri)
         (format t "Block is not Empty, Choose again : ")
         (terpri)
         (setq block_num (read))
         (play_move state player block_num)
        )
    )
)

; variables for checking state...
;*winner*
;*current_state*
  ;;; Already set in while loop...
(defun check_current_state(game_state)
    ; Check if draw
    (setq draw_flag 0)
    (loop for i from 0 to 3
      do (loop for j from 0 to 3
            do (if (equalp (aref game_state i j) '_)
                   (setq draw_flag 1)
               )
         )
    )
    (if (= draw_flag 0)
        (progn
          (setq *current_state* 'Draw)
          (return-from check_current_state)
        )
    )
    
    ; Check horizontals
    (if (and (equalp (aref game_state 0 0) (aref game_state 0 1))
             (equalp (aref game_state 0 1) (aref game_state 0 2))
             (not (equalp (aref game_state 0 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 0 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 0 1) (aref game_state 0 2))
             (equalp (aref game_state 0 2) (aref game_state 0 3))
             (not (equalp (aref game_state 0 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 0 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 1 0) (aref game_state 1 1))
             (equalp (aref game_state 1 1) (aref game_state 1 2))
             (not (equalp (aref game_state 1 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 1 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 1 1) (aref game_state 1 2))
             (equalp (aref game_state 1 2) (aref game_state 1 3))
             (not (equalp (aref game_state 1 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 1 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 2 0) (aref game_state 2 1))
             (equalp (aref game_state 2 1) (aref game_state 2 2))
             (not (equalp (aref game_state 2 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 2 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 2 1) (aref game_state 2 2))
             (equalp (aref game_state 2 2) (aref game_state 2 3))
             (not (equalp (aref game_state 2 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 2 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 3 0) (aref game_state 3 1))
             (equalp (aref game_state 3 1) (aref game_state 3 2))
             (not (equalp (aref game_state 3 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 3 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 3 1) (aref game_state 3 2))
             (equalp (aref game_state 3 2) (aref game_state 3 3))
             (not (equalp (aref game_state 3 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 3 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    
    
    ; Check verticals
    (if (and (equalp (aref game_state 0 0) (aref game_state 1 0))
             (equalp (aref game_state 1 0) (aref game_state 2 0))
             (not (equalp (aref game_state 0 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 0 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 1 0) (aref game_state 2 0))
             (equalp (aref game_state 2 0) (aref game_state 3 0))
             (not (equalp (aref game_state 1 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 1 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 0 1) (aref game_state 1 1))
             (equalp (aref game_state 1 1) (aref game_state 2 1))
             (not (equalp (aref game_state 0 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 0 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 1 1) (aref game_state 2 1))
             (equalp (aref game_state 2 1) (aref game_state 3 1))
             (not (equalp (aref game_state 1 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 1 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 0 2) (aref game_state 1 2))
             (equalp (aref game_state 1 2) (aref game_state 2 2))
             (not (equalp (aref game_state 0 2) '_))
        )
        (progn
          (setq *winner* (aref game_state 0 2))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 1 2) (aref game_state 2 2))
             (equalp (aref game_state 2 2) (aref game_state 3 2))
             (not (equalp (aref game_state 1 2) '_))
        )
        (progn
          (setq *winner* (aref game_state 1 2))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 0 3) (aref game_state 1 3))
             (equalp (aref game_state 1 3) (aref game_state 2 3))
             (not (equalp (aref game_state 0 3) '_))
        )
        (progn
          (setq *winner* (aref game_state 0 3))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 1 3) (aref game_state 2 3))
             (equalp (aref game_state 2 3) (aref game_state 3 3))
             (not (equalp (aref game_state 1 3) '_))
        )
        (progn
          (setq *winner* (aref game_state 1 3))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    
    ; Check diagonals
    (if (and (equalp (aref game_state 0 1) (aref game_state 1 2))
             (equalp (aref game_state 1 2) (aref game_state 2 3))
             (not (equalp (aref game_state 0 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 0 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 0 0) (aref game_state 1 1))
             (equalp (aref game_state 1 1) (aref game_state 2 2))
             (not (equalp (aref game_state 0 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 0 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 1 1) (aref game_state 2 2))
             (equalp (aref game_state 2 2) (aref game_state 3 3))
             (not (equalp (aref game_state 1 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 1 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 1 0) (aref game_state 2 1))
             (equalp (aref game_state 2 1) (aref game_state 3 2))
             (not (equalp (aref game_state 1 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 1 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 2 0) (aref game_state 1 1))
             (equalp (aref game_state 1 1) (aref game_state 0 2))
             (not (equalp (aref game_state 2 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 2 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 3 0) (aref game_state 2 1))
             (equalp (aref game_state 2 1) (aref game_state 1 2))
             (not (equalp (aref game_state 3 0) '_))
        )
        (progn
          (setq *winner* (aref game_state 3 0))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 2 1) (aref game_state 1 2))
             (equalp (aref game_state 1 2) (aref game_state 0 3))
             (not (equalp (aref game_state 2 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 2 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
    (if (and (equalp (aref game_state 3 1) (aref game_state 2 2))
             (equalp (aref game_state 2 2) (aref game_state 1 3))
             (not (equalp (aref game_state 3 1) '_))
        )
        (progn
          (setq *winner* (aref game_state 3 1))
          (setq *current_state* 'Done )
          (return-from check_current_state)
        )
    )
)

(defun print_board(game_state)
    (print '--------------------)
    (terpri)
    (format t "| ~s || ~s || ~s || ~s |" (aref game_state 0 0) (aref game_state 0 1) (aref game_state 0 2) (aref game_state 0 3))
    (print '--------------------)
    (terpri)
    (format t "| ~s || ~s || ~s || ~s |" (aref game_state 1 0) (aref game_state 1 1) (aref game_state 1 2) (aref game_state 1 3))
    (print '--------------------)
    (terpri)
    (format t "| ~s || ~s || ~s || ~s |" (aref game_state 2 0) (aref game_state 2 1) (aref game_state 2 2) (aref game_state 2 3))
    (print '--------------------)
    (terpri)
    (format t "| ~s || ~s || ~s || ~s |" (aref game_state 3 0) (aref game_state 3 1) (aref game_state 3 2) (aref game_state 3 3))
    (print '--------------------)
    (terpri)
    
)

;;; Check_state function for virtual finding BestMove...
(defun check_state(game_state)
    ; Check if draw
    (setq draw_flag 0)
    (loop for i from 0 to 3
      do (loop for j from 0 to 3
            do (if (equalp (aref game_state i j) '_)
                   (setq draw_flag 1)
               )
         )
    )
    (if (= draw_flag 0)
        (progn
          (setq *currentstate* 'Draw)
          (return-from check_state)
        )
    )
    
    ; Check horizontals
    (if (and (equalp (aref game_state 0 0) (aref game_state 0 1))
             (equalp (aref game_state 0 1) (aref game_state 0 2))
             (not (equalp (aref game_state 0 0) '_))
        )
        (progn
          (setq *win* (aref game_state 0 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 0 1) (aref game_state 0 2))
             (equalp (aref game_state 0 2) (aref game_state 0 3))
             (not (equalp (aref game_state 0 1) '_))
        )
        (progn
          (setq *win* (aref game_state 0 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 1 0) (aref game_state 1 1))
             (equalp (aref game_state 1 1) (aref game_state 1 2))
             (not (equalp (aref game_state 1 0) '_))
        )
        (progn
          (setq *win* (aref game_state 1 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 1 1) (aref game_state 1 2))
             (equalp (aref game_state 1 2) (aref game_state 1 3))
             (not (equalp (aref game_state 1 1) '_))
        )
        (progn
          (setq *win* (aref game_state 1 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 2 0) (aref game_state 2 1))
             (equalp (aref game_state 2 1) (aref game_state 2 2))
             (not (equalp (aref game_state 2 0) '_))
        )
        (progn
          (setq *win* (aref game_state 2 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 2 1) (aref game_state 2 2))
             (equalp (aref game_state 2 2) (aref game_state 2 3))
             (not (equalp (aref game_state 2 1) '_))
        )
        (progn
          (setq *win* (aref game_state 2 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 3 0) (aref game_state 3 1))
             (equalp (aref game_state 3 1) (aref game_state 3 2))
             (not (equalp (aref game_state 3 0) '_))
        )
        (progn
          (setq *win* (aref game_state 3 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 3 1) (aref game_state 3 2))
             (equalp (aref game_state 3 2) (aref game_state 3 3))
             (not (equalp (aref game_state 3 1) '_))
        )
        (progn
          (setq *win* (aref game_state 3 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    
    
    ; Check verticals
    (if (and (equalp (aref game_state 0 0) (aref game_state 1 0))
             (equalp (aref game_state 1 0) (aref game_state 2 0))
             (not (equalp (aref game_state 0 0) '_))
        )
        (progn
          (setq *win* (aref game_state 0 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 1 0) (aref game_state 2 0))
             (equalp (aref game_state 2 0) (aref game_state 3 0))
             (not (equalp (aref game_state 1 0) '_))
        )
        (progn
          (setq *win* (aref game_state 1 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 0 1) (aref game_state 1 1))
             (equalp (aref game_state 1 1) (aref game_state 2 1))
             (not (equalp (aref game_state 0 1) '_))
        )
        (progn
          (setq *win* (aref game_state 0 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 1 1) (aref game_state 2 1))
             (equalp (aref game_state 2 1) (aref game_state 3 1))
             (not (equalp (aref game_state 1 1) '_))
        )
        (progn
          (setq *win* (aref game_state 1 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 0 2) (aref game_state 1 2))
             (equalp (aref game_state 1 2) (aref game_state 2 2))
             (not (equalp (aref game_state 0 2) '_))
        )
        (progn
          (setq *win* (aref game_state 0 2))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 1 2) (aref game_state 2 2))
             (equalp (aref game_state 2 2) (aref game_state 3 2))
             (not (equalp (aref game_state 1 2) '_))
        )
        (progn
          (setq *win* (aref game_state 1 2))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 0 3) (aref game_state 1 3))
             (equalp (aref game_state 1 3) (aref game_state 2 3))
             (not (equalp (aref game_state 0 3) '_))
        )
        (progn
          (setq *win* (aref game_state 0 3))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 1 3) (aref game_state 2 3))
             (equalp (aref game_state 2 3) (aref game_state 3 3))
             (not (equalp (aref game_state 1 3) '_))
        )
        (progn
          (setq *win* (aref game_state 1 3))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    
    ; Check diagonals
    (if (and (equalp (aref game_state 0 1) (aref game_state 1 2))
             (equalp (aref game_state 1 2) (aref game_state 2 3))
             (not (equalp (aref game_state 0 1) '_))
        )
        (progn
          (setq *win* (aref game_state 0 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 0 0) (aref game_state 1 1))
             (equalp (aref game_state 1 1) (aref game_state 2 2))
             (not (equalp (aref game_state 0 0) '_))
        )
        (progn
          (setq *win* (aref game_state 0 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 1 1) (aref game_state 2 2))
             (equalp (aref game_state 2 2) (aref game_state 3 3))
             (not (equalp (aref game_state 1 1) '_))
        )
        (progn
          (setq *win* (aref game_state 1 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 1 0) (aref game_state 2 1))
             (equalp (aref game_state 2 1) (aref game_state 3 2))
             (not (equalp (aref game_state 1 0) '_))
        )
        (progn
          (setq *win* (aref game_state 1 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 2 0) (aref game_state 1 1))
             (equalp (aref game_state 1 1) (aref game_state 0 2))
             (not (equalp (aref game_state 2 0) '_))
        )
        (progn
          (setq *win* (aref game_state 2 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 3 0) (aref game_state 2 1))
             (equalp (aref game_state 2 1) (aref game_state 1 2))
             (not (equalp (aref game_state 3 0) '_))
        )
        (progn
          (setq *win* (aref game_state 3 0))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 2 1) (aref game_state 1 2))
             (equalp (aref game_state 1 2) (aref game_state 0 3))
             (not (equalp (aref game_state 2 1) '_))
        )
        (progn
          (setq *win* (aref game_state 2 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
    (if (and (equalp (aref game_state 3 1) (aref game_state 2 2))
             (equalp (aref game_state 2 2) (aref game_state 1 3))
             (not (equalp (aref game_state 3 1) '_))
        )
        (progn
          (setq *win* (aref game_state 3 1))
          (setq *currentstate* 'Done )
          (return-from check_state)
        )
    )
)

(defun copy_game_state(state)
    (defparameter new_state (make-array '(4 4) :initial-element '_))

    (loop for i from 0 to 3
      do (loop for j from 0 to 3
            do (setf (aref new_state i j) (aref state i j))
         )
    )
            
    (return-from copy_game_state new_state)
)


(defun getBestMove(state player)
    
    ;;;;;;;;Minimax Algorithm;;;;;;;;
    
    (setq *currentstate* 'Not_Done)
    (setq *win* nil)
    (check_state state)
    (if (and (equalp *win* 'O)
             (equalp *currentstate* 'Done)
        )      ;;;If AI won
        (return-from getBestMove)
    (if (and (equalp *win* 'X)
             (equalp *currentstate* 'Done)
        )      ;;;If Human won
        (return-from getBestMove)
    (if (equalp *currentstate* 'Draw)      ;;;Draw condition
        (return-from getBestMove)
    )))
    
    
    (defparameter moves (make-array 100 :initial-element 0))
    (defparameter empty_cells (make-array 100 :initial-element 0))
    (setq k 0)
    (loop for i from 0 to 3
      do (loop for j from 0 to 3
           do (if (equalp (aref state i j) '_)
                  (progn
                  (setf (aref empty_cells k) (+ (* i 4) (+ j 1)))
                  (setq k (+ k 1))
                  )
              )
         )
    )
    
    (setq m 0)
    (loop for l from 0 to 98
      do (if (not (equalp (aref empty_cells l) 0))
             (progn
              (setq move (make-hash-table))
              (setf (gethash 'index move) (aref empty_cells l))
        
              (setq new_state (copy_game_state state))
              (play_move new_state player (aref empty_cells l))
        
              (if (equalp player 'O)    ;;; If AI
                  (progn
                  (setq result (getBestMove new_state 'X))    ; make more depth tree for human
                  (setf (gethash 'score move) result)
                  )
                  (progn
                  (setq result (getBestMove new_state 'O))    ; make more depth tree for AI
                  (setf (gethash 'score move) result)
                  )
              )
        
              (setf (aref moves m) move)
              (setq m (+ m 1))
             )
          )
    )

    ;;; Find best move
    (setq best_move 0)
    (if (equalp player 'O)   ;;; If AI player
        (progn
          ;;;;;;;;Max_value function;;;;;;;;
          (setq best most-negative-fixnum)
          (loop for i from 0 to 98
            do (if (not (equalp (aref moves i) 0))
                   (if (not (equalp (gethash 'score (aref moves i)) nil))
                   (if (> (gethash 'score (aref moves i)) best)
                       (progn
                         (setq best (gethash 'score (aref moves i)))
                         (setq best_move (gethash 'index (aref moves i)))
                       )
                   ))
               )
          )
        )
        (progn
          ;;;;;;;;Min_value function;;;;;;;;
          (setq best most-positive-fixnum)
          (loop for i from 0 to 98
            do (if (not (equalp (aref moves i) 0))
                   (if (not (equalp (gethash 'score (aref moves i)) nil))
                   (if (< (gethash 'score (aref moves i)) best)
                       (progn
                         (setq best (gethash 'score (aref moves i)))
                         (setq best_move (gethash 'index (aref moves i)))
                       )
                   ))
               )
          )
        )
     )
                
    (return-from getBestMove best_move)
)


; PLaying
(setq play_again 'Y)
(loop while (equalp play_again 'Y)
    do (defparameter game_state (make-array '(4 4) :initial-element '_))
  
       (setq *current_state* 'Not_Done)
       (setq *winner* nil)
       (terpri)
       (print 'New_Game!)
       (terpri)
       (print_board game_state)
       (terpri)
       (format t "Choose which player goes first - X (You - the Human) or O (The AI): ")
       (setq player_choice (read))
    
       (if (equalp player_choice 'X)
           (setq current_player_idx 0)
           (setq current_player_idx 1)
       )
       
       (loop while (equalp *current_state* 'Not_Done)
           do (if (equalp current_player_idx 0)
                  (progn
                    ; Human's turn
                    (terpri)
                    (format t "Human's turn, Choose where to place (1 to 16): ")
                    (setq block_choice (read))
                    (play_move game_state (aref players current_player_idx) block_choice)
                    (terpri)
                  )
                  (progn
                    ; AI's turn
                    (print 'AI_playing...)
                    (terpri)
                    (setq block_choice (getBestMove game_state (aref players current_player_idx)))
                    (play_move game_state (aref players current_player_idx) block_choice)
                    (format t "AI plays move: ~s."  block_choice)
                    (terpri)
                  )
              )
              (print_board game_state)
              (check_current_state game_state)
              (if (not(equalp *winner* nil))
                  (format t "~% ~s won!!! ~%" *winner*)
                  (setq current_player_idx (mod (+ current_player_idx 1) 2))
              )
              (if (equalp *current_state* 'Draw)
                  (print 'Draw!!!)
              )    
       )
       (terpri)
       (format t "Wanna try again ?(Y/N) : ")
       (setq play_again (read))
       (if (equalp play_again 'N)
           (format t "Thanks for Playing! ~%Good Bye...~%")
       )
)


        
